#!/usr/bin/env node

/**
 * Auto-generate posts-index.js from markdown files
 * 
 * Usage:
 *   node generate-posts-index.js
 * 
 * This script scans posts/ directories and creates posts-index.js
 * Run this before committing when you add new posts
 */

const fs = require('fs');
const path = require('path');

// Directories to scan for markdown files
const POST_DIRECTORIES = [
    'posts/exp',
    'posts/study',
    'posts/dailynote'
];

/**
 * Recursively find all .md files in a directory
 */
function findMarkdownFiles(dir) {
    const files = [];
    
    if (!fs.existsSync(dir)) {
        console.warn(`‚ö†Ô∏è  Directory not found: ${dir}`);
        return files;
    }
    
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    
    for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        
        if (entry.isDirectory()) {
            // Recursively search subdirectories
            files.push(...findMarkdownFiles(fullPath));
        } else if (entry.isFile() && entry.name.endsWith('.md')) {
            // Convert Windows paths to forward slashes for web
            const webPath = fullPath.replace(/\\/g, '/');
            files.push(webPath);
        }
    }
    
    return files;
}

/**
 * Extract date from frontmatter for sorting
 */
function extractDate(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf-8');
        const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
        
        if (frontmatterMatch) {
            const frontmatter = frontmatterMatch[1];
            const dateMatch = frontmatter.match(/^(?:date|Date):\s*(.+)$/m);
            
            if (dateMatch) {
                return new Date(dateMatch[1].trim());
            }
        }
    } catch (error) {
        console.warn(`‚ö†Ô∏è  Could not read date from ${filePath}`);
    }
    
    // Fallback to file modification time
    const stats = fs.statSync(filePath);
    return stats.mtime;
}

/**
 * Main function
 */
function generatePostsIndex() {
    console.log('üîç Scanning for markdown files...\n');
    
    let allFiles = [];
    
    // Scan each directory
    for (const dir of POST_DIRECTORIES) {
        const files = findMarkdownFiles(dir);
        console.log(`   ${dir}: found ${files.length} file(s)`);
        allFiles.push(...files);
    }
    
    console.log(`\n‚úÖ Total: ${allFiles.length} markdown file(s)\n`);
    
    if (allFiles.length === 0) {
        console.warn('‚ö†Ô∏è  No markdown files found!');
        console.warn('   Make sure you have .md files in posts/exp/, posts/study/, or posts/dailynote/\n');
    }
    
    // Sort by date (newest first)
    allFiles.sort((a, b) => {
        const dateA = extractDate(a);
        const dateB = extractDate(b);
        return dateB - dateA;
    });
    
    // Generate the JavaScript file content
    const content = `// Auto-generated list of markdown files
// Generated: ${new Date().toISOString()}
// 
// DO NOT EDIT THIS FILE MANUALLY!
// Run 'node generate-posts-index.js' to regenerate
//
// To add a new post:
// 1. Create your .md file in posts/exp/, posts/study/, or posts/dailynote/
// 2. Run: node generate-posts-index.js
// 3. Commit both the .md file and this file

const POST_FILES = [
${allFiles.map(file => `    '${file}'`).join(',\n')}
];
`;
    
    // Write to posts-index.js
    const outputPath = 'posts-index.js';
    fs.writeFileSync(outputPath, content, 'utf-8');
    
    console.log('üìù Generated posts-index.js:');
    console.log('‚îÄ'.repeat(50));
    allFiles.forEach((file, index) => {
        console.log(`   ${index + 1}. ${file}`);
    });
    console.log('‚îÄ'.repeat(50));
    console.log(`\n‚ú® Successfully updated ${outputPath}\n`);
    console.log('Next steps:');
    console.log('   git add posts-index.js');
    console.log('   git commit -m "Update posts index"');
    console.log('   git push\n');
}

// Run the script
try {
    generatePostsIndex();
} catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
}

